# Generated by Django 5.2.1 on 2025-07-15 12:12

import dirtyfields.dirtyfields
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_active', models.BooleanField(default=False, verbose_name='активированный аккаунт')),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='эл. почта')),
                ('activation_code', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='код активации')),
                ('expired_code', models.DateTimeField(verbose_name='срок действия кода')),
                ('friends', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='друзья')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
                'ordering': ('id',),
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FriendInvite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateField(auto_now_add=True, verbose_name='дата создания')),
                ('is_accepted', models.BooleanField(default=None, null=True, verbose_name='принято')),
                ('from_client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_friend_invites', to=settings.AUTH_USER_MODEL, verbose_name='кто')),
                ('to_client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_friend_invites', to=settings.AUTH_USER_MODEL, verbose_name='кого')),
            ],
            options={
                'verbose_name': 'приглашение',
                'verbose_name_plural': 'приглашения',
                'ordering': ('id',),
                'constraints': [models.UniqueConstraint(fields=('from_client', 'to_client'), name='unique_friend_invite')],
            },
        ),
    ]
